/**
 * Build for the Fabric3 core project.
 * <p/>
 * The default build cleans, compiles, builds archives and installs the latter in the local Maven repo. To build without running clean, execute:
 * <code>./gradlew -Pbuild=local</code>. To execute a full build where Javadoc and source archives are generated and installed in the local Maven repo,
 * execute: <code>./gradlew --stacktrace -Pbuild=full</code>.
 * <p/>
 * To deploy to the Nexus release staging repository, change the version and execute:
 * <code>./gradlew -Pbuild=deploy -Dcom.sun.net.ssl.rsaPreMasterSecretFix=true</code>
 * after a full build has been run. Note the 'rsaPreMasterSecretFix' parameter is required as a workaround for this JDK bug:
 * https://bugs.openjdk.java.net/browse/JDK-8030806
 * <p/>
 * Note the 'uploadArchives' tasks requires a gradle.properties file to be present containing private key information and authentication parameters
 * (sonatypeUsername and sonatypePassword).
 *
 */
project.description 'Fabric3 Core'

if (hasProperty('build')) {
    ext.build = project['build']
} else {
    ext.build = 'default';
}

if (ext.build == 'local') {
    defaultTasks 'jar', 'fabric3Contribution', 'war', 'fatJar', 'distZip', 'assemble', 'install'
} else if (ext.build == 'deploy') {
    defaultTasks 'uploadArchives'
} else {
    defaultTasks 'clean', 'jar', 'fabric3Contribution', 'war', 'fatJar', 'distZip', 'assemble', 'install'
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

}

def deployProjects() {
    // define projects that are deployed to Maven Central, i.e. they contain source files; project parent directories will be ignored
    return subprojects.findAll { new File(it.projectDir, "src").exists() }
}

def kernelAndExtensions() {
    // all kernel implementation and extension projects
    return subprojects.findAll {
        (it.path.startsWith(':kernel:impl:') || it.path.startsWith(':extension:')) && new File(it.projectDir,
                "src").exists() && !it.path.endsWith('-api')
    }
}

configure(deployProjects()) {
    group fabric3Group
    def releaseBuild = !version.endsWith('SNAPSHOT');

    apply plugin: 'java'
    apply plugin: 'maven'

    if (build == 'full' || build == 'deploy') {
        apply plugin: 'signing'
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: junitVersion
        testCompile group: 'org.easymock', name: 'easymock', version: easyMockVersion
    }

    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
        }
        dependencies {
            classpath group: 'org.fabric3.gradle', name: 'fabric3-contribution', version: pluginVersion
        }

    }

    if (build == 'full' || build == 'deploy') {
        task sourcesJar(type: Jar) {
            classifier 'sources'
            from sourceSets.main.allSource
        }

        task docJar(type: Jar, dependsOn: javadoc) {
            classifier 'javadoc'
            from javadoc.destinationDir
        }
    }

    artifacts {
        if (project.name.contains('tomcat-host') || project.name.contains('weblogic-host')) {
            // avoid POM generation error where WAR and JAR artifacts clash - avoid enabling jar archives for WAR modules
        } else if (project.name.contains('runtime-standalone')
                || project.name.contains('fabric3-runtime-weblogic')
                || project.name.contains('profile-')) {
            // set distribution to the ZIP file
            archives file('build/distributions/' + project.name + '-' + version + '-bin.zip')
        } else if (project.name.contains('fabric3-runtime-tomcat')) {
            // set distribution to the ZIP file
            archives file('build/distributions/runtime-tomcat-' + version + '-bin.zip')
        } else if (project.name.contains('fabric3-node-distribution')) {
            // set distribution to the ZIP file
            archives file('build/distributions/' + project.name + '-' + version + '-bin.zip')
        } else {
            archives jar
        }
        if (build == 'full' || build == 'deploy') {
            archives sourcesJar
            archives docJar
        }
    }

    install.repositories.mavenInstaller.pom.whenConfigured { pom ->
        pom.project { project ->
            scm {
                url 'scm:git@github.com:Fabric3/fabric3-core.git'
                connection 'scm:git@github.com:Fabric3/fabric3-core.git'
                developerConnection 'scm:git@github.com:Fabric3/fabric3-core.git'
            }

            licenses {
                license {
                    name 'GNU + Classpath Exception'
                    url 'http://www.fabric3.org/license.html'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'fabric3'
                    name 'Fabric3 Project'
                }
            }
            if (artifactId.contains('profile-')) {
                // profile projects use POM packaging
                packaging 'pom'
            }
        }
    }

    uploadArchives {
        repositories {
            if (releaseBuild) {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                        authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }

                }
            } else {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                        authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }
                }
            }
        }

        signing {
            required { releaseBuild && (build == 'full' || build == 'deploy') }
            sign configurations.archives
        }
    }


}

configure(kernelAndExtensions()) {
    dependencies {
        compile project(':kernel:api:fabric3-spi')
        if (!path.startsWith(':kernel:impl:fabric3-util')) {
            compile project(':kernel:impl:fabric3-util')
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

